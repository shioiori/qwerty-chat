{"ast":null,"code":"import ChatListContactGroupButton from './ChatListContactGroupButton.vue';\nimport ChatListContactChatItem from './ChatListContactChatItem.vue';\nimport ChatListContactSearch from './ChatListContactSearch.vue';\nimport ChatListContactUserItem from './ChatListContactUserItem.vue';\nexport default {\n  components: {\n    ChatListContactGroupButton,\n    ChatListContactChatItem,\n    ChatListContactUserItem,\n    ChatListContactSearch\n  },\n  data() {\n    return {\n      chat_connection: [],\n      user_connection: []\n    };\n  },\n  beforeMount() {\n    this.getCurrentChatConnection();\n  },\n  methods: {\n    async searchConnection(search_value) {\n      this.user_connection = await this.$store.getters.getSearchConnection(search_value);\n      this.chat_connection = [];\n    },\n    async getCurrentChatConnection() {\n      this.chat_connection = await this.$store.getters.getCurrentConnection;\n    },\n    async getCurrentChatById(chat_id) {\n      var chat = await this.$store.getters.getCurrentChat(chat_id);\n      this.emitter.emit(\"getCurrentChat\", chat.id);\n      this.emitter.emit(\"onChat\", true);\n      this.getChatName(chat);\n    },\n    async getCurrentChatByUser(user_id, is_limited) {\n      var chat = await this.$store.getters.checkUserInChat([this.$store.getters.getUserId, user_id], is_limited);\n      if (chat == null) {\n        chat = await this.$store.getters.createCurrentChat([this.$store.getters.getUserId, user_id], null, is_limited);\n      }\n      this.emitter.emit(\"getCurrentChat\", chat.id);\n      this.emitter.emit(\"onChat\", true);\n      this.getChatName(chat);\n    },\n    getChatName(chat) {\n      console.log(chat);\n      let id = this.$store.getters.getUserId;\n      let username = chat.name ? chat.name : chat.members[0].id == id ? chat.members[1].name : chat.members[0].name;\n      console.log(username);\n      this.emitter.emit(\"setChatName\", username);\n    }\n  }\n};","map":{"version":3,"names":["ChatListContactGroupButton","ChatListContactChatItem","ChatListContactSearch","ChatListContactUserItem","components","data","chat_connection","user_connection","beforeMount","getCurrentChatConnection","methods","searchConnection","search_value","$store","getters","getSearchConnection","getCurrentConnection","getCurrentChatById","chat_id","chat","getCurrentChat","emitter","emit","id","getChatName","getCurrentChatByUser","user_id","is_limited","checkUserInChat","getUserId","createCurrentChat","console","log","username","name","members"],"sources":["F:\\Personal Project\\qwerty-chat\\src\\components\\ChatListContact.vue"],"sourcesContent":["<template>\r\n    <div id=\"list-contact\" class=\"col-span-3 border-2 border-gray-100\">\r\n        <div class=\"user-contact-info border-b-2 border-gray-100 flex items-center p-4\">\r\n            <p class=\"text-xl flex-auto font-bold\">Chat</p>\r\n            <ChatListContactGroupButton/>\r\n        </div>\r\n        <div class=\"lst-contact my-4 px-4\">\r\n            <ChatListContactSearch\r\n                @search-connection=\"searchConnection\"/>\r\n            <ChatListContactChatItem \r\n                v-for=\"(item, index) in chat_connection\"\r\n                v-bind:chat=\"item\"\r\n                v-bind:key=\"index\"\r\n                @click=\"getCurrentChatById(item.id)\" \r\n            />\r\n            <ChatListContactUserItem \r\n                v-for=\"(item, index) in user_connection\"\r\n                v-bind:user=\"item\"\r\n                v-bind:key=\"index\"\r\n                @click=\"getCurrentChatByUser(item.id, true)\" \r\n            />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport ChatListContactGroupButton from './ChatListContactGroupButton.vue';\r\nimport ChatListContactChatItem from './ChatListContactChatItem.vue';\r\nimport ChatListContactSearch from './ChatListContactSearch.vue';\r\nimport ChatListContactUserItem from './ChatListContactUserItem.vue';\r\n\r\nexport default {\r\n    components: {\r\n        ChatListContactGroupButton,\r\n        ChatListContactChatItem,\r\n        ChatListContactUserItem,\r\n        ChatListContactSearch,\r\n    },\r\n    data(){\r\n        return {\r\n            chat_connection: [],\r\n            user_connection: [],\r\n        }\r\n    },\r\n    beforeMount(){\r\n        this.getCurrentChatConnection();\r\n    },\r\n    methods: {\r\n        async searchConnection(search_value){\r\n            this.user_connection = await this.$store.getters.getSearchConnection(search_value)\r\n            this.chat_connection = [];\r\n        },\r\n        async getCurrentChatConnection(){\r\n            this.chat_connection = await this.$store.getters.getCurrentConnection;\r\n        },\r\n        async getCurrentChatById(chat_id){\r\n            var chat = await this.$store.getters.getCurrentChat(chat_id);\r\n            this.emitter.emit(\"getCurrentChat\", chat.id);\r\n            this.emitter.emit(\"onChat\", true);\r\n            this.getChatName(chat);\r\n        },\r\n        async getCurrentChatByUser(user_id, is_limited){\r\n            var chat = await this.$store.getters.checkUserInChat([this.$store.getters.getUserId, user_id], is_limited);\r\n            if (chat == null){\r\n                chat = await this.$store.getters.createCurrentChat([this.$store.getters.getUserId, user_id], null, is_limited)\r\n            }\r\n            this.emitter.emit(\"getCurrentChat\", chat.id);\r\n            this.emitter.emit(\"onChat\", true);\r\n            this.getChatName(chat);\r\n        },\r\n        getChatName(chat){\r\n            console.log(chat)\r\n            let id = this.$store.getters.getUserId;\r\n            let username = chat.name ? chat.name : (chat.members[0].id == id ? chat.members[1].name : chat.members[0].name);\r\n            console.log(username)\r\n            this.emitter.emit(\"setChatName\", username);\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":"AA0BA,OAAOA,0BAAyB,MAAO,kCAAkC;AACzE,OAAOC,uBAAsB,MAAO,+BAA+B;AACnE,OAAOC,qBAAoB,MAAO,6BAA6B;AAC/D,OAAOC,uBAAsB,MAAO,+BAA+B;AAEnE,eAAe;EACXC,UAAU,EAAE;IACRJ,0BAA0B;IAC1BC,uBAAuB;IACvBE,uBAAuB;IACvBD;EACJ,CAAC;EACDG,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,eAAe,EAAE,EAAE;MACnBC,eAAe,EAAE;IACrB;EACJ,CAAC;EACDC,WAAWA,CAAA,EAAE;IACT,IAAI,CAACC,wBAAwB,CAAC,CAAC;EACnC,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,gBAAgBA,CAACC,YAAY,EAAC;MAChC,IAAI,CAACL,eAAc,GAAI,MAAM,IAAI,CAACM,MAAM,CAACC,OAAO,CAACC,mBAAmB,CAACH,YAAY;MACjF,IAAI,CAACN,eAAc,GAAI,EAAE;IAC7B,CAAC;IACD,MAAMG,wBAAwBA,CAAA,EAAE;MAC5B,IAAI,CAACH,eAAc,GAAI,MAAM,IAAI,CAACO,MAAM,CAACC,OAAO,CAACE,oBAAoB;IACzE,CAAC;IACD,MAAMC,kBAAkBA,CAACC,OAAO,EAAC;MAC7B,IAAIC,IAAG,GAAI,MAAM,IAAI,CAACN,MAAM,CAACC,OAAO,CAACM,cAAc,CAACF,OAAO,CAAC;MAC5D,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC,gBAAgB,EAAEH,IAAI,CAACI,EAAE,CAAC;MAC5C,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;MACjC,IAAI,CAACE,WAAW,CAACL,IAAI,CAAC;IAC1B,CAAC;IACD,MAAMM,oBAAoBA,CAACC,OAAO,EAAEC,UAAU,EAAC;MAC3C,IAAIR,IAAG,GAAI,MAAM,IAAI,CAACN,MAAM,CAACC,OAAO,CAACc,eAAe,CAAC,CAAC,IAAI,CAACf,MAAM,CAACC,OAAO,CAACe,SAAS,EAAEH,OAAO,CAAC,EAAEC,UAAU,CAAC;MAC1G,IAAIR,IAAG,IAAK,IAAI,EAAC;QACbA,IAAG,GAAI,MAAM,IAAI,CAACN,MAAM,CAACC,OAAO,CAACgB,iBAAiB,CAAC,CAAC,IAAI,CAACjB,MAAM,CAACC,OAAO,CAACe,SAAS,EAAEH,OAAO,CAAC,EAAE,IAAI,EAAEC,UAAU;MACjH;MACA,IAAI,CAACN,OAAO,CAACC,IAAI,CAAC,gBAAgB,EAAEH,IAAI,CAACI,EAAE,CAAC;MAC5C,IAAI,CAACF,OAAO,CAACC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;MACjC,IAAI,CAACE,WAAW,CAACL,IAAI,CAAC;IAC1B,CAAC;IACDK,WAAWA,CAACL,IAAI,EAAC;MACbY,OAAO,CAACC,GAAG,CAACb,IAAI;MAChB,IAAII,EAAC,GAAI,IAAI,CAACV,MAAM,CAACC,OAAO,CAACe,SAAS;MACtC,IAAII,QAAO,GAAId,IAAI,CAACe,IAAG,GAAIf,IAAI,CAACe,IAAG,GAAKf,IAAI,CAACgB,OAAO,CAAC,CAAC,CAAC,CAACZ,EAAC,IAAKA,EAAC,GAAIJ,IAAI,CAACgB,OAAO,CAAC,CAAC,CAAC,CAACD,IAAG,GAAIf,IAAI,CAACgB,OAAO,CAAC,CAAC,CAAC,CAACD,IAAK;MAC/GH,OAAO,CAACC,GAAG,CAACC,QAAQ;MACpB,IAAI,CAACZ,OAAO,CAACC,IAAI,CAAC,aAAa,EAAEW,QAAQ,CAAC;IAC9C;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}