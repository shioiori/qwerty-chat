{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\nvar HubConnectionBuilder = /** @class */function () {\n  function HubConnectionBuilder() {}\n  HubConnectionBuilder.prototype.configureLogging = function (logging) {\n    Arg.isRequired(logging, \"logging\");\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else {\n      this.logger = new ConsoleLogger(logging);\n    }\n    return this;\n  };\n  HubConnectionBuilder.prototype.withUrl = function (url, transportTypeOrOptions) {\n    Arg.isRequired(url, \"url\");\n    this.url = url;\n    // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = transportTypeOrOptions;\n    } else {\n      this.httpConnectionOptions = {\n        transport: transportTypeOrOptions\n      };\n    }\n    return this;\n  };\n  /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\r\n   */\n  HubConnectionBuilder.prototype.withHubProtocol = function (protocol) {\n    Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  };\n  /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\r\n   */\n  HubConnectionBuilder.prototype.build = function () {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    var httpConnectionOptions = this.httpConnectionOptions || {};\n    // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    }\n    // Now create the connection\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n    var connection = new HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol());\n  };\n  return HubConnectionBuilder;\n}();\nexport { HubConnectionBuilder };\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"names":["HttpConnection","HubConnection","JsonHubProtocol","NullLogger","Arg","ConsoleLogger","HubConnectionBuilder","prototype","configureLogging","logging","isRequired","isLogger","logger","withUrl","url","transportTypeOrOptions","httpConnectionOptions","transport","withHubProtocol","protocol","build","undefined","Error","connection","create","instance","log"],"sources":["../../src/HubConnectionBuilder.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url: string;\r\n    /** @internal */\r\n    public logger: ILogger;\r\n\r\n    /** Configures console logging for the {@link @aspnet/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @aspnet/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @aspnet/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = transportTypeOrOptions;\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol());\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,aAAa,QAAQ,iBAAiB;AAK/C,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,GAAG,EAAEC,aAAa,QAAQ,SAAS;AAE5C;AACA,IAAAC,oBAAA;EAAA,SAAAA,qBAAA,GAkHA;EA3FWA,oBAAA,CAAAC,SAAA,CAAAC,gBAAgB,GAAvB,UAAwBC,OAA2B;IAC/CL,GAAG,CAACM,UAAU,CAACD,OAAO,EAAE,SAAS,CAAC;IAElC,IAAIE,QAAQ,CAACF,OAAO,CAAC,EAAE;MACnB,IAAI,CAACG,MAAM,GAAGH,OAAO;KACxB,MAAM;MACH,IAAI,CAACG,MAAM,GAAG,IAAIP,aAAa,CAACI,OAAO,CAAC;;IAG5C,OAAO,IAAI;EACf,CAAC;EA0BMH,oBAAA,CAAAC,SAAA,CAAAM,OAAO,GAAd,UAAeC,GAAW,EAAEC,sBAAmE;IAC3FX,GAAG,CAACM,UAAU,CAACI,GAAG,EAAE,KAAK,CAAC;IAE1B,IAAI,CAACA,GAAG,GAAGA,GAAG;IAEd;IACA;IACA,IAAI,OAAOC,sBAAsB,KAAK,QAAQ,EAAE;MAC5C,IAAI,CAACC,qBAAqB,GAAGD,sBAAsB;KACtD,MAAM;MACH,IAAI,CAACC,qBAAqB,GAAG;QACzBC,SAAS,EAAEF;OACd;;IAGL,OAAO,IAAI;EACf,CAAC;EAED;;;;EAIOT,oBAAA,CAAAC,SAAA,CAAAW,eAAe,GAAtB,UAAuBC,QAAsB;IACzCf,GAAG,CAACM,UAAU,CAACS,QAAQ,EAAE,UAAU,CAAC;IAEpC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,OAAO,IAAI;EACf,CAAC;EAED;;;;EAIOb,oBAAA,CAAAC,SAAA,CAAAa,KAAK,GAAZ;IACI;IACA;IACA,IAAMJ,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,IAAI,EAAE;IAE9D;IACA,IAAIA,qBAAqB,CAACJ,MAAM,KAAKS,SAAS,EAAE;MAC5C;MACAL,qBAAqB,CAACJ,MAAM,GAAG,IAAI,CAACA,MAAM;;IAG9C;IACA,IAAI,CAAC,IAAI,CAACE,GAAG,EAAE;MACX,MAAM,IAAIQ,KAAK,CAAC,0FAA0F,CAAC;;IAE/G,IAAMC,UAAU,GAAG,IAAIvB,cAAc,CAAC,IAAI,CAACc,GAAG,EAAEE,qBAAqB,CAAC;IAEtE,OAAOf,aAAa,CAACuB,MAAM,CACvBD,UAAU,EACV,IAAI,CAACX,MAAM,IAAIT,UAAU,CAACsB,QAAQ,EAClC,IAAI,CAACN,QAAQ,IAAI,IAAIjB,eAAe,EAAE,CAAC;EAC/C,CAAC;EACL,OAAAI,oBAAC;AAAD,CAAC,CAlHD;;AAoHA,SAAAK,SAAkBC,MAAW;EACzB,OAAOA,MAAM,CAACc,GAAG,KAAKL,SAAS;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}