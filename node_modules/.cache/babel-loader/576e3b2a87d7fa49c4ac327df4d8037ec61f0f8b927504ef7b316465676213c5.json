{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { Arg, Subject } from \"./Utils\";\nvar DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\n/** Represents a connection to a SignalR Hub. */\nvar HubConnection = /** @class */function () {\n  function HubConnection(connection, logger, protocol) {\n    var _this = this;\n    Arg.isRequired(connection, \"connection\");\n    Arg.isRequired(logger, \"logger\");\n    Arg.isRequired(protocol, \"protocol\");\n    this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\n    this.logger = logger;\n    this.protocol = protocol;\n    this.connection = connection;\n    this.handshakeProtocol = new HandshakeProtocol();\n    this.connection.onreceive = function (data) {\n      return _this.processIncomingData(data);\n    };\n    this.connection.onclose = function (error) {\n      return _this.connectionClosed(error);\n    };\n    this.callbacks = {};\n    this.methods = {};\n    this.closedCallbacks = [];\n    this.id = 0;\n  }\n  /** @internal */\n  // Using a public static factory method means we can have a private constructor and an _internal_\n  // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\n  // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\n  // public parameter-less constructor.\n  HubConnection.create = function (connection, logger, protocol) {\n    return new HubConnection(connection, logger, protocol);\n  };\n  /** Starts the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n   */\n  HubConnection.prototype.start = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var handshakeRequest;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            handshakeRequest = {\n              protocol: this.protocol.name,\n              version: this.protocol.version\n            };\n            this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\n            this.receivedHandshakeResponse = false;\n            return [4 /*yield*/, this.connection.start(this.protocol.transferFormat)];\n          case 1:\n            _a.sent();\n            this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\n            return [4 /*yield*/, this.connection.send(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest))];\n          case 2:\n            _a.sent();\n            this.logger.log(LogLevel.Information, \"Using HubProtocol '\" + this.protocol.name + \"'.\");\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\n            this.cleanupTimeout();\n            this.configureTimeout();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /** Stops the connection.\r\n   *\r\n   * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n   */\n  HubConnection.prototype.stop = function () {\n    this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\n    this.cleanupTimeout();\n    return this.connection.stop();\n  };\n  /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n   *\r\n   * @typeparam T The type of the items returned by the server.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n   */\n  HubConnection.prototype.stream = function (methodName) {\n    var _this = this;\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var invocationDescriptor = this.createStreamInvocation(methodName, args);\n    var subject = new Subject(function () {\n      var cancelInvocation = _this.createCancelInvocation(invocationDescriptor.invocationId);\n      var cancelMessage = _this.protocol.writeMessage(cancelInvocation);\n      delete _this.callbacks[invocationDescriptor.invocationId];\n      return _this.connection.send(cancelMessage);\n    });\n    this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\n      if (error) {\n        subject.error(error);\n        return;\n      }\n      if (invocationEvent.type === MessageType.Completion) {\n        if (invocationEvent.error) {\n          subject.error(new Error(invocationEvent.error));\n        } else {\n          subject.complete();\n        }\n      } else {\n        subject.next(invocationEvent.item);\n      }\n    };\n    var message = this.protocol.writeMessage(invocationDescriptor);\n    this.connection.send(message).catch(function (e) {\n      subject.error(e);\n      delete _this.callbacks[invocationDescriptor.invocationId];\n    });\n    return subject;\n  };\n  /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n   *\r\n   * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n   * be processing the invocation.\r\n   *\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n   */\n  HubConnection.prototype.send = function (methodName) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var invocationDescriptor = this.createInvocation(methodName, args, true);\n    var message = this.protocol.writeMessage(invocationDescriptor);\n    return this.connection.send(message);\n  };\n  /** Invokes a hub method on the server using the specified name and arguments.\r\n   *\r\n   * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n   * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n   * resolving the Promise.\r\n   *\r\n   * @typeparam T The expected return type.\r\n   * @param {string} methodName The name of the server method to invoke.\r\n   * @param {any[]} args The arguments used to invoke the server method.\r\n   * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n   */\n  HubConnection.prototype.invoke = function (methodName) {\n    var _this = this;\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var invocationDescriptor = this.createInvocation(methodName, args, false);\n    var p = new Promise(function (resolve, reject) {\n      _this.callbacks[invocationDescriptor.invocationId] = function (invocationEvent, error) {\n        if (error) {\n          reject(error);\n          return;\n        }\n        if (invocationEvent.type === MessageType.Completion) {\n          var completionMessage = invocationEvent;\n          if (completionMessage.error) {\n            reject(new Error(completionMessage.error));\n          } else {\n            resolve(completionMessage.result);\n          }\n        } else {\n          reject(new Error(\"Unexpected message type: \" + invocationEvent.type));\n        }\n      };\n      var message = _this.protocol.writeMessage(invocationDescriptor);\n      _this.connection.send(message).catch(function (e) {\n        reject(e);\n        delete _this.callbacks[invocationDescriptor.invocationId];\n      });\n    });\n    return p;\n  };\n  /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n   *\r\n   * @param {string} methodName The name of the hub method to define.\r\n   * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n   */\n  HubConnection.prototype.on = function (methodName, newMethod) {\n    if (!methodName || !newMethod) {\n      return;\n    }\n    methodName = methodName.toLowerCase();\n    if (!this.methods[methodName]) {\n      this.methods[methodName] = [];\n    }\n    // Preventing adding the same handler multiple times.\n    if (this.methods[methodName].indexOf(newMethod) !== -1) {\n      return;\n    }\n    this.methods[methodName].push(newMethod);\n  };\n  HubConnection.prototype.off = function (methodName, method) {\n    if (!methodName) {\n      return;\n    }\n    methodName = methodName.toLowerCase();\n    var handlers = this.methods[methodName];\n    if (!handlers) {\n      return;\n    }\n    if (method) {\n      var removeIdx = handlers.indexOf(method);\n      if (removeIdx !== -1) {\n        handlers.splice(removeIdx, 1);\n        if (handlers.length === 0) {\n          delete this.methods[methodName];\n        }\n      }\n    } else {\n      delete this.methods[methodName];\n    }\n  };\n  /** Registers a handler that will be invoked when the connection is closed.\r\n   *\r\n   * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n   */\n  HubConnection.prototype.onclose = function (callback) {\n    if (callback) {\n      this.closedCallbacks.push(callback);\n    }\n  };\n  HubConnection.prototype.processIncomingData = function (data) {\n    this.cleanupTimeout();\n    if (!this.receivedHandshakeResponse) {\n      data = this.processHandshakeResponse(data);\n      this.receivedHandshakeResponse = true;\n    }\n    // Data may have all been read when processing handshake response\n    if (data) {\n      // Parse the messages\n      var messages = this.protocol.parseMessages(data, this.logger);\n      for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\n        var message = messages_1[_i];\n        switch (message.type) {\n          case MessageType.Invocation:\n            this.invokeClientMethod(message);\n            break;\n          case MessageType.StreamItem:\n          case MessageType.Completion:\n            var callback = this.callbacks[message.invocationId];\n            if (callback != null) {\n              if (message.type === MessageType.Completion) {\n                delete this.callbacks[message.invocationId];\n              }\n              callback(message);\n            }\n            break;\n          case MessageType.Ping:\n            // Don't care about pings\n            break;\n          case MessageType.Close:\n            this.logger.log(LogLevel.Information, \"Close message received from server.\");\n            // We don't want to wait on the stop itself.\n            // tslint:disable-next-line:no-floating-promises\n            this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : null);\n            break;\n          default:\n            this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type);\n            break;\n        }\n      }\n    }\n    this.configureTimeout();\n  };\n  HubConnection.prototype.processHandshakeResponse = function (data) {\n    var _a;\n    var responseMessage;\n    var remainingData;\n    try {\n      _a = this.handshakeProtocol.parseHandshakeResponse(data), remainingData = _a[0], responseMessage = _a[1];\n    } catch (e) {\n      var message = \"Error parsing handshake response: \" + e;\n      this.logger.log(LogLevel.Error, message);\n      var error = new Error(message);\n      // We don't want to wait on the stop itself.\n      // tslint:disable-next-line:no-floating-promises\n      this.connection.stop(error);\n      throw error;\n    }\n    if (responseMessage.error) {\n      var message = \"Server returned handshake error: \" + responseMessage.error;\n      this.logger.log(LogLevel.Error, message);\n      // We don't want to wait on the stop itself.\n      // tslint:disable-next-line:no-floating-promises\n      this.connection.stop(new Error(message));\n    } else {\n      this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\n    }\n    return remainingData;\n  };\n  HubConnection.prototype.configureTimeout = function () {\n    var _this = this;\n    if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\n      // Set the timeout timer\n      this.timeoutHandle = setTimeout(function () {\n        return _this.serverTimeout();\n      }, this.serverTimeoutInMilliseconds);\n    }\n  };\n  HubConnection.prototype.serverTimeout = function () {\n    // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\n    // Terminate the connection, but we don't need to wait on the promise.\n    // tslint:disable-next-line:no-floating-promises\n    this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\n  };\n  HubConnection.prototype.invokeClientMethod = function (invocationMessage) {\n    var _this = this;\n    var methods = this.methods[invocationMessage.target.toLowerCase()];\n    if (methods) {\n      methods.forEach(function (m) {\n        return m.apply(_this, invocationMessage.arguments);\n      });\n      if (invocationMessage.invocationId) {\n        // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\n        var message = \"Server requested a response, which is not supported in this version of the client.\";\n        this.logger.log(LogLevel.Error, message);\n        // We don't need to wait on this Promise.\n        // tslint:disable-next-line:no-floating-promises\n        this.connection.stop(new Error(message));\n      }\n    } else {\n      this.logger.log(LogLevel.Warning, \"No client method with the name '\" + invocationMessage.target + \"' found.\");\n    }\n  };\n  HubConnection.prototype.connectionClosed = function (error) {\n    var _this = this;\n    var callbacks = this.callbacks;\n    this.callbacks = {};\n    Object.keys(callbacks).forEach(function (key) {\n      var callback = callbacks[key];\n      callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\n    });\n    this.cleanupTimeout();\n    this.closedCallbacks.forEach(function (c) {\n      return c.apply(_this, [error]);\n    });\n  };\n  HubConnection.prototype.cleanupTimeout = function () {\n    if (this.timeoutHandle) {\n      clearTimeout(this.timeoutHandle);\n    }\n  };\n  HubConnection.prototype.createInvocation = function (methodName, args, nonblocking) {\n    if (nonblocking) {\n      return {\n        arguments: args,\n        target: methodName,\n        type: MessageType.Invocation\n      };\n    } else {\n      var id = this.id;\n      this.id++;\n      return {\n        arguments: args,\n        invocationId: id.toString(),\n        target: methodName,\n        type: MessageType.Invocation\n      };\n    }\n  };\n  HubConnection.prototype.createStreamInvocation = function (methodName, args) {\n    var id = this.id;\n    this.id++;\n    return {\n      arguments: args,\n      invocationId: id.toString(),\n      target: methodName,\n      type: MessageType.StreamInvocation\n    };\n  };\n  HubConnection.prototype.createCancelInvocation = function (id) {\n    return {\n      invocationId: id,\n      type: MessageType.CancelInvocation\n    };\n  };\n  return HubConnection;\n}();\nexport { HubConnection };","map":{"version":3,"names":["HandshakeProtocol","MessageType","LogLevel","Arg","Subject","DEFAULT_TIMEOUT_IN_MS","HubConnection","connection","logger","protocol","_this","isRequired","serverTimeoutInMilliseconds","handshakeProtocol","onreceive","data","processIncomingData","onclose","error","connectionClosed","callbacks","methods","closedCallbacks","id","create","prototype","start","handshakeRequest","name","version","log","Debug","receivedHandshakeResponse","transferFormat","_a","sent","send","writeHandshakeRequest","Information","cleanupTimeout","configureTimeout","stop","stream","methodName","args","_i","arguments","length","invocationDescriptor","createStreamInvocation","subject","cancelInvocation","createCancelInvocation","invocationId","cancelMessage","writeMessage","invocationEvent","type","Completion","Error","complete","next","item","message","catch","e","createInvocation","invoke","p","Promise","resolve","reject","completionMessage","result","on","newMethod","toLowerCase","indexOf","push","off","method","handlers","removeIdx","splice","callback","processHandshakeResponse","messages","parseMessages","messages_1","Invocation","invokeClientMethod","StreamItem","Ping","Close","Warning","responseMessage","remainingData","parseHandshakeResponse","features","inherentKeepAlive","timeoutHandle","setTimeout","serverTimeout","invocationMessage","target","forEach","m","apply","Object","keys","key","undefined","c","clearTimeout","nonblocking","toString","StreamInvocation","CancelInvocation"],"sources":["../../src/HubConnection.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Arg, Subject } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private id: number;\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private timeoutHandle?: any;\r\n    private receivedHandshakeResponse: boolean;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol): HubConnection {\r\n        return new HubConnection(connection, logger, protocol);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public async start(): Promise<void> {\r\n        const handshakeRequest: HandshakeRequestMessage = {\r\n            protocol: this.protocol.name,\r\n            version: this.protocol.version,\r\n        };\r\n\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        this.receivedHandshakeResponse = false;\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n        await this.connection.send(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n        // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n        this.cleanupTimeout();\r\n        this.configureTimeout();\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        this.cleanupTimeout();\r\n        return this.connection.stop();\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n\r\n        const subject = new Subject<T>(() => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            const cancelMessage: any = this.protocol.writeMessage(cancelInvocation);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return this.connection.send(cancelMessage);\r\n        });\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n\r\n            if (invocationEvent.type === MessageType.Completion) {\r\n                if (invocationEvent.error) {\r\n                    subject.error(new Error(invocationEvent.error));\r\n                } else {\r\n                    subject.complete();\r\n                }\r\n            } else {\r\n                subject.next((invocationEvent.item) as T);\r\n            }\r\n        };\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        this.connection.send(message)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        return subject;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, true);\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    const completionMessage = invocationEvent as CompletionMessage;\r\n                    if (completionMessage.error) {\r\n                        reject(new Error(completionMessage.error));\r\n                    } else {\r\n                        resolve(completionMessage.result);\r\n                    }\r\n                } else {\r\n                    reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                }\r\n            };\r\n\r\n            const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n            this.connection.send(message)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    delete this.callbacks[invocationDescriptor.invocationId];\r\n                });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @aspnet/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @aspnet/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback != null) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        // We don't want to wait on the stop itself.\r\n                        // tslint:disable-next-line:no-floating-promises\r\n                        this.connection.stop(message.error ? new Error(\"Server returned an error on close: \" + message.error) : null);\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, \"Invalid message type: \" + message.type);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.configureTimeout();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            // We don't want to wait on the stop itself.\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.connection.stop(new Error(message));\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        return remainingData;\r\n    }\r\n\r\n    private configureTimeout() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n\r\n                // We don't need to wait on this Promise.\r\n                // tslint:disable-next-line:no-floating-promises\r\n                this.connection.stop(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n            });\r\n\r\n        this.cleanupTimeout();\r\n\r\n        this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const id = this.id;\r\n            this.id++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\r\n        const id = this.id;\r\n        this.id++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}