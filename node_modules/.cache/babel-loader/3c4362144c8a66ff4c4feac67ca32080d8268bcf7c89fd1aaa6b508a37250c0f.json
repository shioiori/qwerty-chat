{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { NullLogger } from \"./Loggers\";\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nvar JSON_HUB_PROTOCOL_NAME = \"json\";\n/** Implements the JSON Hub Protocol. */\nvar JsonHubProtocol = /** @class */function () {\n  function JsonHubProtocol() {\n    /** @inheritDoc */\n    this.name = JSON_HUB_PROTOCOL_NAME;\n    /** @inheritDoc */\n    this.version = 1;\n    /** @inheritDoc */\n    this.transferFormat = TransferFormat.Text;\n  }\n  /** Creates an array of {@link @aspnet/signalr.HubMessage} objects from the specified serialized representation.\r\n   *\r\n   * @param {string} input A string containing the serialized representation.\r\n   * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n   */\n  JsonHubProtocol.prototype.parseMessages = function (input, logger) {\n    // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n    if (typeof input !== \"string\") {\n      throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n    }\n    if (!input) {\n      return [];\n    }\n    if (logger === null) {\n      logger = NullLogger.instance;\n    }\n    // Parse the messages\n    var messages = TextMessageFormat.parse(input);\n    var hubMessages = [];\n    for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\n      var message = messages_1[_i];\n      var parsedMessage = JSON.parse(message);\n      if (typeof parsedMessage.type !== \"number\") {\n        throw new Error(\"Invalid payload.\");\n      }\n      switch (parsedMessage.type) {\n        case MessageType.Invocation:\n          this.isInvocationMessage(parsedMessage);\n          break;\n        case MessageType.StreamItem:\n          this.isStreamItemMessage(parsedMessage);\n          break;\n        case MessageType.Completion:\n          this.isCompletionMessage(parsedMessage);\n          break;\n        case MessageType.Ping:\n          // Single value, no need to validate\n          break;\n        case MessageType.Close:\n          // All optional values, no need to validate\n          break;\n        default:\n          // Future protocol changes can add message types, old clients can ignore them\n          logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\n          continue;\n      }\n      hubMessages.push(parsedMessage);\n    }\n    return hubMessages;\n  };\n  /** Writes the specified {@link @aspnet/signalr.HubMessage} to a string and returns it.\r\n   *\r\n   * @param {HubMessage} message The message to write.\r\n   * @returns {string} A string containing the serialized representation of the message.\r\n   */\n  JsonHubProtocol.prototype.writeMessage = function (message) {\n    return TextMessageFormat.write(JSON.stringify(message));\n  };\n  JsonHubProtocol.prototype.isInvocationMessage = function (message) {\n    this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\n    if (message.invocationId !== undefined) {\n      this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\n    }\n  };\n  JsonHubProtocol.prototype.isStreamItemMessage = function (message) {\n    this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\n    if (message.item === undefined) {\n      throw new Error(\"Invalid payload for StreamItem message.\");\n    }\n  };\n  JsonHubProtocol.prototype.isCompletionMessage = function (message) {\n    if (message.result && message.error) {\n      throw new Error(\"Invalid payload for Completion message.\");\n    }\n    if (!message.result && message.error) {\n      this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\n    }\n    this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\n  };\n  JsonHubProtocol.prototype.assertNotEmptyString = function (value, errorMessage) {\n    if (typeof value !== \"string\" || value === \"\") {\n      throw new Error(errorMessage);\n    }\n  };\n  return JsonHubProtocol;\n}();\nexport { JsonHubProtocol };","map":{"version":3,"names":["MessageType","LogLevel","TransferFormat","NullLogger","TextMessageFormat","JSON_HUB_PROTOCOL_NAME","JsonHubProtocol","name","version","transferFormat","Text","prototype","parseMessages","input","logger","Error","instance","messages","parse","hubMessages","_i","messages_1","length","message","parsedMessage","JSON","type","Invocation","isInvocationMessage","StreamItem","isStreamItemMessage","Completion","isCompletionMessage","Ping","Close","log","Information","push","writeMessage","write","stringify","assertNotEmptyString","target","invocationId","undefined","item","result","error","value","errorMessage"],"sources":["../../src/JsonHubProtocol.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @aspnet/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @aspnet/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}