{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n  return t;\n};\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\n/** Represents an HTTP response. */\nvar HttpResponse = /** @class */function () {\n  function HttpResponse(statusCode, statusText, content) {\n    this.statusCode = statusCode;\n    this.statusText = statusText;\n    this.content = content;\n  }\n  return HttpResponse;\n}();\nexport { HttpResponse };\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\nvar HttpClient = /** @class */function () {\n  function HttpClient() {}\n  HttpClient.prototype.get = function (url, options) {\n    return this.send(__assign({}, options, {\n      method: \"GET\",\n      url: url\n    }));\n  };\n  HttpClient.prototype.post = function (url, options) {\n    return this.send(__assign({}, options, {\n      method: \"POST\",\n      url: url\n    }));\n  };\n  HttpClient.prototype.delete = function (url, options) {\n    return this.send(__assign({}, options, {\n      method: \"DELETE\",\n      url: url\n    }));\n  };\n  return HttpClient;\n}();\nexport { HttpClient };\n/** Default implementation of {@link @aspnet/signalr.HttpClient}. */\nvar DefaultHttpClient = /** @class */function (_super) {\n  __extends(DefaultHttpClient, _super);\n  /** Creates a new instance of the {@link @aspnet/signalr.DefaultHttpClient}, using the provided {@link @aspnet/signalr.ILogger} to log messages. */\n  function DefaultHttpClient(logger) {\n    var _this = _super.call(this) || this;\n    _this.logger = logger;\n    return _this;\n  }\n  /** @inheritDoc */\n  DefaultHttpClient.prototype.send = function (request) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(request.method, request.url, true);\n      xhr.withCredentials = true;\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      // Explicitly setting the Content-Type header for React Native on Android platform.\n      xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n      if (request.headers) {\n        Object.keys(request.headers).forEach(function (header) {\n          return xhr.setRequestHeader(header, request.headers[header]);\n        });\n      }\n      if (request.responseType) {\n        xhr.responseType = request.responseType;\n      }\n      if (request.abortSignal) {\n        request.abortSignal.onabort = function () {\n          xhr.abort();\n        };\n      }\n      if (request.timeout) {\n        xhr.timeout = request.timeout;\n      }\n      xhr.onload = function () {\n        if (request.abortSignal) {\n          request.abortSignal.onabort = null;\n        }\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n        } else {\n          reject(new HttpError(xhr.statusText, xhr.status));\n        }\n      };\n      xhr.onerror = function () {\n        _this.logger.log(LogLevel.Warning, \"Error from HTTP request. \" + xhr.status + \": \" + xhr.statusText);\n        reject(new HttpError(xhr.statusText, xhr.status));\n      };\n      xhr.ontimeout = function () {\n        _this.logger.log(LogLevel.Warning, \"Timeout from HTTP request.\");\n        reject(new TimeoutError());\n      };\n      xhr.send(request.content || \"\");\n    });\n  };\n  return DefaultHttpClient;\n}(HttpClient);\nexport { DefaultHttpClient };","map":{"version":3,"names":["HttpError","TimeoutError","LogLevel","HttpResponse","statusCode","statusText","content","HttpClient","prototype","get","url","options","send","__assign","method","post","delete","DefaultHttpClient","_super","__extends","logger","_this","call","request","Promise","resolve","reject","xhr","XMLHttpRequest","open","withCredentials","setRequestHeader","headers","Object","keys","forEach","header","responseType","abortSignal","onabort","abort","timeout","onload","status","response","responseText","onerror","log","Warning","ontimeout"],"sources":["../../src/HttpClient.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: { [key: string]: string };\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @aspnet/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n}\r\n\r\n/** Default implementation of {@link @aspnet/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    /** Creates a new instance of the {@link @aspnet/signalr.DefaultHttpClient}, using the provided {@link @aspnet/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            if (request.headers) {\r\n                Object.keys(request.headers)\r\n                    .forEach((header) => xhr.setRequestHeader(header, request.headers[header]));\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}