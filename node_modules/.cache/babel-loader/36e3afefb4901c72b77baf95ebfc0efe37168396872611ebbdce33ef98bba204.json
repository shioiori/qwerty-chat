{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\nvar SHUTDOWN_TIMEOUT = 5 * 1000;\n// Not exported from 'index', this type is internal.\n/** @private */\nvar LongPollingTransport = /** @class */function () {\n  function LongPollingTransport(httpClient, accessTokenFactory, logger, logMessageContent, shutdownTimeout) {\n    this.httpClient = httpClient;\n    this.accessTokenFactory = accessTokenFactory || function () {\n      return null;\n    };\n    this.logger = logger;\n    this.pollAbort = new AbortController();\n    this.logMessageContent = logMessageContent;\n    this.shutdownTimeout = shutdownTimeout || SHUTDOWN_TIMEOUT;\n  }\n  Object.defineProperty(LongPollingTransport.prototype, \"pollAborted\", {\n    // This is an internal type, not exported from 'index' so this is really just internal.\n    get: function () {\n      return this.pollAbort.aborted;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  LongPollingTransport.prototype.connect = function (url, transferFormat) {\n    return __awaiter(this, void 0, void 0, function () {\n      var pollOptions, token, closeError, pollUrl, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            Arg.isRequired(url, \"url\");\n            Arg.isRequired(transferFormat, \"transferFormat\");\n            Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n            this.url = url;\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\n            if (transferFormat === TransferFormat.Binary && typeof new XMLHttpRequest().responseType !== \"string\") {\n              // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\n              throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n            }\n            pollOptions = {\n              abortSignal: this.pollAbort.signal,\n              headers: {},\n              timeout: 90000\n            };\n            if (transferFormat === TransferFormat.Binary) {\n              pollOptions.responseType = \"arraybuffer\";\n            }\n            return [4 /*yield*/, this.accessTokenFactory()];\n          case 1:\n            token = _a.sent();\n            this.updateHeaderToken(pollOptions, token);\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl);\n            return [4 /*yield*/, this.httpClient.get(pollUrl, pollOptions)];\n          case 2:\n            response = _a.sent();\n            if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode);\n              // Mark running as false so that the poll immediately ends and runs the close logic\n              closeError = new HttpError(response.statusText, response.statusCode);\n              this.running = false;\n            } else {\n              this.running = true;\n            }\n            // tslint:disable-next-line:no-floating-promises\n            this.poll(this.url, pollOptions, closeError);\n            return [2 /*return*/, Promise.resolve()];\n        }\n      });\n    });\n  };\n  LongPollingTransport.prototype.updateHeaderToken = function (request, token) {\n    if (token) {\n      // tslint:disable-next-line:no-string-literal\n      request.headers[\"Authorization\"] = \"Bearer \" + token;\n      return;\n    }\n    // tslint:disable-next-line:no-string-literal\n    if (request.headers[\"Authorization\"]) {\n      // tslint:disable-next-line:no-string-literal\n      delete request.headers[\"Authorization\"];\n    }\n  };\n  LongPollingTransport.prototype.poll = function (url, pollOptions, closeError) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, pollUrl, response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0,, 8, 9]);\n            _a.label = 1;\n          case 1:\n            if (!this.running) return [3 /*break*/, 7];\n            return [4 /*yield*/, this.accessTokenFactory()];\n          case 2:\n            token = _a.sent();\n            this.updateHeaderToken(pollOptions, token);\n            _a.label = 3;\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n            pollUrl = url + \"&_=\" + Date.now();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) polling: \" + pollUrl);\n            return [4 /*yield*/, this.httpClient.get(pollUrl, pollOptions)];\n          case 4:\n            response = _a.sent();\n            if (response.statusCode === 204) {\n              this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\n              this.running = false;\n            } else if (response.statusCode !== 200) {\n              this.logger.log(LogLevel.Error, \"(LongPolling transport) Unexpected response code: \" + response.statusCode);\n              // Unexpected status code\n              closeError = new HttpError(response.statusText, response.statusCode);\n              this.running = false;\n            } else {\n              // Process the response\n              if (response.content) {\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) data received. \" + getDataDetail(response.content, this.logMessageContent));\n                if (this.onreceive) {\n                  this.onreceive(response.content);\n                }\n              } else {\n                // This is another way timeout manifest.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              }\n            }\n            return [3 /*break*/, 6];\n          case 5:\n            e_1 = _a.sent();\n            if (!this.running) {\n              // Log but disregard errors that occur after we were stopped by DELETE\n              this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll errored after shutdown: \" + e_1.message);\n            } else {\n              if (e_1 instanceof TimeoutError) {\n                // Ignore timeouts and reissue the poll.\n                this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              } else {\n                // Close the connection with the error as the result.\n                closeError = e_1;\n                this.running = false;\n              }\n            }\n            return [3 /*break*/, 6];\n          case 6:\n            return [3 /*break*/, 1];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            // Indicate that we've stopped so the shutdown timer doesn't get registered.\n            this.stopped = true;\n            // Clean up the shutdown timer if it was registered\n            if (this.shutdownTimer) {\n              clearTimeout(this.shutdownTimer);\n            }\n            // Fire our onclosed event\n            if (this.onclose) {\n              this.logger.log(LogLevel.Trace, \"(LongPolling transport) Firing onclose event. Error: \" + (closeError || \"<undefined>\"));\n              this.onclose(closeError);\n            }\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Transport finished.\");\n            return [7 /*endfinally*/];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  LongPollingTransport.prototype.send = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.running) {\n          return [2 /*return*/, Promise.reject(new Error(\"Cannot send until the transport is connected\"))];\n        }\n        return [2 /*return*/, sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent)];\n      });\n    });\n  };\n  LongPollingTransport.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteOptions, token;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0,, 3, 4]);\n            this.running = false;\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) sending DELETE request to \" + this.url + \".\");\n            deleteOptions = {\n              headers: {}\n            };\n            return [4 /*yield*/, this.accessTokenFactory()];\n          case 1:\n            token = _a.sent();\n            this.updateHeaderToken(deleteOptions, token);\n            return [4 /*yield*/, this.httpClient.delete(this.url, deleteOptions)];\n          case 2:\n            _a.sent();\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\n            return [3 /*break*/, 4];\n          case 3:\n            // Abort the poll after the shutdown timeout if the server doesn't stop the poll.\n            if (!this.stopped) {\n              this.shutdownTimer = setTimeout(function () {\n                _this.logger.log(LogLevel.Warning, \"(LongPolling transport) server did not terminate after DELETE request, canceling poll.\");\n                // Abort any outstanding poll\n                _this.pollAbort.abort();\n              }, this.shutdownTimeout);\n            }\n            return [7 /*endfinally*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return LongPollingTransport;\n}();\nexport { LongPollingTransport };","map":{"version":3,"names":["AbortController","HttpError","TimeoutError","LogLevel","TransferFormat","Arg","getDataDetail","sendMessage","SHUTDOWN_TIMEOUT","LongPollingTransport","httpClient","accessTokenFactory","logger","logMessageContent","shutdownTimeout","pollAbort","Object","defineProperty","prototype","get","aborted","connect","url","transferFormat","isRequired","isIn","log","Trace","Binary","XMLHttpRequest","responseType","Error","pollOptions","abortSignal","signal","headers","timeout","token","_a","sent","updateHeaderToken","pollUrl","Date","now","response","statusCode","closeError","statusText","running","poll","Promise","resolve","request","Information","content","onreceive","e_1","message","stopped","shutdownTimer","clearTimeout","onclose","send","data","reject","stop","deleteOptions","delete","setTimeout","_this","Warning","abort"],"sources":["../../src/LongPollingTransport.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, sendMessage } from \"./Utils\";\r\n\r\nconst SHUTDOWN_TIMEOUT = 5 * 1000;\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string | Promise<string>;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n\r\n    private url: string;\r\n    private pollAbort: AbortController;\r\n    private shutdownTimer: any; // We use 'any' because this is an object in NodeJS. But it still gets passed to clearTimeout, so it doesn't really matter\r\n    private shutdownTimeout: number;\r\n    private running: boolean;\r\n    private stopped: boolean;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string | Promise<string>, logger: ILogger, logMessageContent: boolean, shutdownTimeout?: number) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n        this.shutdownTimeout = shutdownTimeout || SHUTDOWN_TIMEOUT;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting\");\r\n\r\n        if (transferFormat === TransferFormat.Binary && (typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: {},\r\n            timeout: 90000,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.accessTokenFactory();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        let closeError: Error;\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            closeError = new HttpError(response.statusText, response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.poll(this.url, pollOptions, closeError);\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string) {\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest, closeError: Error): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.accessTokenFactory();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n                        // Unexpected status code\r\n                        closeError = new HttpError(response.statusText, response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after we were stopped by DELETE\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            // Indicate that we've stopped so the shutdown timer doesn't get registered.\r\n            this.stopped = true;\r\n\r\n            // Clean up the shutdown timer if it was registered\r\n            if (this.shutdownTimer) {\r\n                clearTimeout(this.shutdownTimer);\r\n            }\r\n\r\n            // Fire our onclosed event\r\n            if (this.onclose) {\r\n                this.logger.log(LogLevel.Trace, `(LongPolling transport) Firing onclose event. Error: ${closeError || \"<undefined>\"}`);\r\n                this.onclose(closeError);\r\n            }\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Transport finished.\");\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url, this.accessTokenFactory, data, this.logMessageContent);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        // Send a DELETE request to stop the poll\r\n        try {\r\n            this.running = false;\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: {},\r\n            };\r\n            const token = await this.accessTokenFactory();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n        } finally {\r\n            // Abort the poll after the shutdown timeout if the server doesn't stop the poll.\r\n            if (!this.stopped) {\r\n                this.shutdownTimer = setTimeout(() => {\r\n                    this.logger.log(LogLevel.Warning, \"(LongPolling transport) server did not terminate after DELETE request, canceling poll.\");\r\n\r\n                    // Abort any outstanding poll\r\n                    this.pollAbort.abort();\r\n                }, this.shutdownTimeout);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onreceive: (data: string | ArrayBuffer) => void;\r\n    public onclose: (error?: Error) => void;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}