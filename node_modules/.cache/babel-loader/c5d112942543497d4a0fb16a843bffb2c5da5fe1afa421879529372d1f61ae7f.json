{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n// Not exported from index\n/** @private */\nvar TextMessageFormat = /** @class */function () {\n  function TextMessageFormat() {}\n  TextMessageFormat.write = function (output) {\n    return \"\" + output + TextMessageFormat.RecordSeparator;\n  };\n  TextMessageFormat.parse = function (input) {\n    if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\n      throw new Error(\"Message is incomplete.\");\n    }\n    var messages = input.split(TextMessageFormat.RecordSeparator);\n    messages.pop();\n    return messages;\n  };\n  TextMessageFormat.RecordSeparatorCode = 0x1e;\n  TextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\n  return TextMessageFormat;\n}();\nexport { TextMessageFormat };","map":{"version":3,"names":["TextMessageFormat","write","output","RecordSeparator","parse","input","length","Error","messages","split","pop","RecordSeparatorCode","String","fromCharCode"],"sources":["../../src/TextMessageFormat.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n"],"mappings":"AAAA;AACA;AAEA;AACA;AACA,IAAAA,iBAAA;EAAA,SAAAA,kBAAA,GAiBA;EAbkBA,iBAAA,CAAAC,KAAK,GAAnB,UAAoBC,MAAc;IAC9B,OAAO,KAAGA,MAAM,GAAGF,iBAAiB,CAACG,eAAiB;EAC1D,CAAC;EAEaH,iBAAA,CAAAI,KAAK,GAAnB,UAAoBC,KAAa;IAC7B,IAAIA,KAAK,CAACA,KAAK,CAACC,MAAM,GAAG,CAAC,CAAC,KAAKN,iBAAiB,CAACG,eAAe,EAAE;MAC/D,MAAM,IAAII,KAAK,CAAC,wBAAwB,CAAC;;IAG7C,IAAMC,QAAQ,GAAGH,KAAK,CAACI,KAAK,CAACT,iBAAiB,CAACG,eAAe,CAAC;IAC/DK,QAAQ,CAACE,GAAG,EAAE;IACd,OAAOF,QAAQ;EACnB,CAAC;EAfaR,iBAAA,CAAAW,mBAAmB,GAAG,IAAI;EAC1BX,iBAAA,CAAAG,eAAe,GAAGS,MAAM,CAACC,YAAY,CAACb,iBAAiB,CAACW,mBAAmB,CAAC;EAe9F,OAAAX,iBAAC;CAAA,CAjBD;SAAaA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}